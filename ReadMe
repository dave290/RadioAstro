Directions for using fitting program

OVERVIEW: The fit.py python script and associated modules are intended
to be used to obtain mathematical fits to radio astronomy data
collected with the gr_radio astro suite of programs published through
the West Virginia University Radio Instrumentation Laboratory (WVU-RAIL) as 
part of the NSF-sponsoree DSPIRA program.  

The fit.py script reads data from a ".kel" data file. This data may be formatted
in terms of either frequency or velocity.  

INSTALLATION:  No special instructions.  The script and modules may be copied into
a folder on the user's file system.  This directory should also contain the data 
file to be read and the output file to be written. The "collections" module is
called within the scripts, but this is standard in most python distributions. 

USAGE:  
First, you must place the .kel data file in the fit folder.  Then update the contents
of the file "parameters.txt" to contain the name of the data (.kel) file, the coordinate 
variable (velocity or frequency) and the desired fit range.  View the data file using 
the command below:

python plotkel.py

Using the displayed plot, update the parameters file to make your best guesses 
for the center, coefficient (amplitude) and sigma (width) value for each peak.
Up to three Guassians are allowed.  Each value that can either be fit or held constant.  
Peaks do not need to be listed in A-B-C order of increasing velocity (or frequency)  
Rather, the peaks should be listed in order of decreasing prominence (Peak A should be 
the most prominent, C the least.)  Before you fit your initial guess, you may first set 
all of the fitting flags to "0" in the parameter file, just to see your starting point!

To read the parameters and execute the program, the user enters the following
command into the terminal window command prompt:

python fit.py

After a reasonable guess is generated, the flags can be set to "1" to enable fitting.  
Sometimes, it may be desirable to hold certain parameters constant (say sigma) while 
allowing others to vary. Use the flags to do this, setting the value to 1 to fit, and
0 to hold constant.  If you only wish to fit 2 peaks (not 3) then set the flags to 0 for
Peak C and set the coefficient of peak C to zero also.  There are examples provided
in a folder.

The program proceeds by optimizing the first peak in the user defined guess until 
a least-sum of squares is obtained for this peak's center, coefficient and sigma values. 
It then moves on to optimize the second peak, and then the third.  It then repeats
the entire process until the overall sum is at a relative minimum. The nitty gritty of 
calculating the sum of least squares it handled in the module "minimize.py"
There is no guarantee that this minimum will be global!

In addition to plotting the final function that is obtained, fit.py will write all
output results to a ".dat" file with the same prefix as the ".kel" file.  Note that
the ".dat" file is re-written each time that fit.py is run.

This program is meant for amateur use and is free for all users. The author does not
guarantee that there are no errors.  

David Schultz
June 28, 2021
